POP-FE a tool to automate the process converting PSX disk images and install
them on various platforms, including:
* PSP/VITA
* PSIO
* PS2
* PS3
* Retroarch

This is all LGPLv2.1

TL;DR
For Linux (and windows).
Connect PSP to your Linux/Windows box via USB, then run:

  $ ./pop-fe.py --psp-dir=auto /psx/Grandia1of2.img /psx/Grandia2of2.img

Or create a PS3 PKG: (Linux only)

  $ ./pop-fe.py --ps3-pkg=Grandia.pkg /psx/Grandia1of2.img /psx/Grandia2of2.img

or ...


Enjoy.


DEPENDENCIES:
=============
Iso-parser
----------
You need python support to read ISO9660 images. This is needed to be able to
read system.cnf to discover the game-id.
I support two different such python extensions since the are not all available
on all flavors of linux. Pycdio and Pycdlib.
As long as you have one of them installed things should work.

pip3 install pycdio
or
pip3 install pycdlib

cue2cu2
-------
This is a small program that parses a CUE and reformats it into CU2 format.
It is used by PSIO but also to create the TOC structure we need for PSP
EBOOTs when a CCD file is not present.
It is also required when creating PS3 PKGs.

Please install this python script in the same directory as pop-fe.
It can be downloaded from   https://github.com/NRGDEAD/Cue2cu2
Make it executable by calling

chmod +x cue2cu2.py

binmerge
--------
This is a small python program to merge multi-bin files into a single bin.
This is required if you intend to use pop-fe with multi-bin disks.

This tool can be downloaded from
https://github.com/putnam/binmerge
and should be placed in the same directory as pop-fe.py.

Make it executable with
chmod +x binmerge

requests_cache
--------------
This is to reduce the amount of data we fetch from the internet.
Install this with :
pip3 install requests_cache


HOW TO RUN POP-FE:
==================
Pop-fe needs to create a bunch of temporary files while it is processing the
data. So run it in a shell from the same directory that pop-fe and its
dependencies are installed.
You do not need to copy the game images to this directory.
Pop-fe can read and process the images from remote directories.


POP-FE:
=======
A utility to automate building and installing PSX games onto different
systems.
The current directory where you run this utility from needs to be writable
so that we can use it to store temporary files during the conversing process.
It supports and can convert games stored in the following types of file
formats:

.cue   : CUE file. The preferred option. The actual image file is extracted
         from the content of the cue file. If the file-name found inside the
         cue is a relative path it is assumed that the bin/img file is stored
         in the same directory as the cue file.
.bin   : BIN/IMG files. In this case a temporary .cue file will be created
.img     in the local directory and used for the conversion. This cue file
         will assume that the bin/img file is just one single track of type
         MODE2/2352
.zip   : ZIP file. The ZIP file will be extracted into the local directory
         and if a .cue file is found it will be used.
.*     : Various memory card image formats.
         Memory cards are detected by file size so the extensions does not
	 matter.

The utility supports building and installing the games on various different
target platforms.
Command line arguments are:
-v                     : Verbose. Print additional information about what
		         operations are performed during the game installation.
--title                : Force the title to use for this game.
		         By default pop-fe will automatically discover the
			 game title from the image file provided. This argument
			 can be used to override the title if the autodetection
			 is wrong or fails.
--game_id              : Force the game id. By default pop-fe will extract
		         the SYSTEM.CNF file off the game iso and use it to
			 detect the game-id. This argument can be used to
			 override the id.
--psio-dir <path>      : This specifies the path to where a PSIO sd card has
                         been mounted. The games will be be installed as
                         <path>/<game-title>/<game-title>.bin
                         If you list more than one file it is assumed these
                         are all the disks part of a multidisc game and
                         MULTIDISC.LST will be created accordingly.
                         PSIO uses CU2 files so must have cue2cu2.py installed
			 in the same directory as pop-fe.py.
--psp-dir <path>       : This specifies the path to where a PSP sd card has
                         been mounted. The games will be converted into
                         an EBOOT.PBP and will be installed as
                         <path>/PSP/GAME/<game-id>/EBOOT.PBP
                         The EBOOT.PBP will have a cover icon as well as a
                         background image embedded.
			 If you specify multiple images then a single multi-disk
			 EBOOT.PBP will be created.
			 If you specify path as 'auto' then pop-fe will
			 scan all mounted media and pick the first one that
			 contains a PSP or VITA memory card.
--psp-install-memory-card : Used to install memory card images on the PSP.
			 See memory card section below for usage.
--ps2-dir             : This is the directory that holds the USB stick to
		        install VCD files for running under POPS on a PS2.
--ps3-pkg             : This creates a PS3 PKG. This only works for linux
		        and has some additional requirements. See special
			section below.
			This requires CU2 files so make sure this script is
			installed.
--retroarch-game-dir  : The directory where retroarch game images are to be
                        installed.
--retroarch-thumbnail-dir : Where the coverimage for retroarch should go.
#
Examples:
Assume I have connected my PSP with USB and it is shows up as :
   /run/media/sahlberg/disk
   
$ ./pop-fe.py --psp-dir=/run/media/sahlberg/disk /psx/Metal\ Gear\ Solid\ VR\ Missions.cue

Or you can just let pop-fe try to discover it automagically for you. This
works for both Linux and Windows:

$ ./pop-fe.py --psp-dir=auto /psx/Metal\ Gear\ Solid\ VR\ Missions.cue

If you specify more than one cue file then it is assumed that this is
a multidisc game and we will use the first cue file to determine the
game id and title to be used for the whole set.

Example:
 # ./pop-fe.py --psp-dir=auto /psx/Grandia1of2.img /psx/Grandia2of2.img

During the conversion process the img/bin file will be temporarily converted
into an ISO file as NORMAL01.iso in the current directory.
This is in order to open the iso9660 image and read the system.cnf file
to extract the game id.
You can avoid/skip this step by forcing the game-id from the command line,
using (example only):
    --game-id=SLUS00957
    
Game art and images are fetched from https://psxdatacenter.com/
If a file ICON0.PNG is found in the game directory it assumed to be the
cover image and thus we skip pulling it from psxdatacenter.
Similarly, if PIC1.PNG is found then it is assumed to be a screenshot
or background image and again we skip pulling this file from the site.


Installing Memory Card images on PSP
====================================
Most memory card image formats are supported.
To provide a memory card image to install along with the the game
you just add the filename to the list of images.
The file extension does not matter as we detect the memory cards by file size.
Some platforms, such as PSP, require a two step process to install the
memory cards so follow the onscreen instructions carefully.

Example:
   ./pop-fe.py --psp-dir=auto Crash.cue Crash.srm


You can also install a memory card image directly for an already installed
game. But before this works, you must have ran the game at least once
so that the PSP creates the required metadata files in the SAVEDATA
directory. Since you are not providing a disk image to determine the game-id
from you must specify game-id explicitely.

Example:
   ./pop-fe.py --psp-dir=auto --game_id=SCUS94900 --psp-install-memory-card Crash.srm


VITA SUPPORT
============
Vita is supported and you can install EBOOTs for its memory card also.
The only difference is that when installing on a PSP you specify the path to the
root of the SD card. If you want to install to a SD card for a Vita then you
specify the path to the pspemu directory on the SD card:

Example:  
$ ./pop-fe.py --psp-dir=/run/media/sahlberg/disk/pspemu/ /psx/Metal\ Gear\ Solid\ VR\ Missions.cue

or just use the auto feature:

$ ./pop-fe.py --psp-dir=auto /psx/Metal\ Gear\ Solid\ VR\ Missions.cue


--fetch-metadata
================
This argument will download and install ICON0.PNG, PIC1.PNG as well as the
game id and title in the directory where the game is stored.
This requires that the game directory is writeable.

VMP.PY
======
vmp.py is a utility to convert between signed VMP memory card images
(as used by PSP) and raw memory card images as created for example by
Memory Card Annihilator on the PS2.

PSIO
====
PSIO uses a varient of CUE files called CU2.
To generate a CU2 file when installing PSIO games you need to have the
CUE2CU2.PY tool installed in the same directory as POP-FE.PY.
This tool can be downloaded from :

  https://github.com/NRGDEAD/Cue2cu2

Just copy cue2cu2.py to the same directory as pop-fe.py and make it executable :

  chmod +x cue2cu2.py


PS2 Support
===========
Pop-fe can convert games into VCD format and install it on a USB memory stick
that has been prepared to be used with POPStarter and OPL to play PS1 games.
The USB stick must have a POPS subdirectory where the VCD file and memory cards
will be installed and an ART subdirectory for cover and background images.

PS3 Support
===========
Pop-fe can convert games into a PS3 PKG that can be installed on PS3 systems
with CFW or HEN. For now this only works for Linux as it has some extra
requirements.

Preparations
------------
Install ecdsa python module:

$ pip3 install ecdsa

$ cd <directory where pop-fe is installed>

Install PSL1GHT as a subdirectory in the pop-fe directory
and compile the pgcrypt module:

$ git clone https://github.com/sahlberg/PSL1GHT
$ cd PSL1GHT/tools/ps3py
$ git checkout origin/use-python3
$ make
$ cd ../../..

Then to use it just run it as

$ ./pop-fe.py --ps3-pkg=Grandia.pkg Grandia_d1.img Grandia_d2.img


CDDA SUPPORT
============
CDDA is supported for PSP/VITA/PS3 but requires an external tool to convert the
audio tracks into ATRAC3 LP2 format.
If you do not have this tool installed then pop-fe will still create the
EBOOT.PBP image but without the audio tracks.

To get the audio tracks for games such as RidgeRacerRevolution and similar
working, install and build the tool :

Linux/Fedora
------------
$ sudo dnf install libsndfile-devel
$ cd <directory where pop-fe is installed>
$ git clone https://github.com/dcherednik/atracdenc.git 
$ cd atracdenc/src/
$ cmake .
$ make
$ cd ../..

Windows
-------
No idea.
Anyone, Please contribute instructions for windows, or precompiled binaries.


INSTALLATION
============
Pop-fe has a few external dependencies. It requires python3 and some additional
bits and pieces. Here are some examples on how to install pop-fe and its
dependencies.
Some comments and instructions on different OSes:

Mint20.1:
---------
sudo apt install python-is-python3
sudo apt install python3-pip
pip3 install requests_cache
pip3 install pycdlib
sudo apt install git
git clone https://github.com/sahlberg/pop-fe.git
git clone https://github.com/NRGDEAD/Cue2cu2.git
git clone https://github.com/putnam/binmerge.git
cd pop-fe
cp ../Cue2cu2/cue2cu2.py .
chmod +x cue2cu2.py
cp ../binmerge/binmerge .
chmod +x binmerge

Windows 10:
-----------
Install git
Install python3
pip3 install requests_cache
pip3 install pycdlib
pip3 install Pillow
pip3 install pycryptodome
Start git-bash
git clone https://github.com/sahlberg/pop-fe.git
git clone https://github.com/NRGDEAD/Cue2cu2.git
git clone https://github.com/putnam/binmerge.git
cd pop-fe
git checkout master
cp ../Cue2cu2/cue2cu2.py .
cp ../binmerge/binmerge .

On windows, always run pop-fe from git-bash and from within the pop-fe
directory.
The directory names for the E: drive-letter is /e etc in the git-bash shell
so use --psp-dir=/e or --psp-dir=auto
